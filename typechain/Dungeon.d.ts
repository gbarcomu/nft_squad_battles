/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DungeonInterface extends ethers.utils.Interface {
  functions: {
    "createQuest(bytes32)": FunctionFragment;
    "getNonce()": FunctionFragment;
    "playQuest(uint8,uint8,uint8)": FunctionFragment;
    "resolveQuest(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createQuest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playQuest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveQuest",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playQuest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveQuest",
    data: BytesLike
  ): Result;

  events: {
    "BattleWinners(bool,bool,bool)": EventFragment;
    "IsPlayerWinner(bool)": EventFragment;
    "PseudoRandomNumbers(uint8,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BattleWinners"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsPlayerWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PseudoRandomNumbers"): EventFragment;
}

export class Dungeon extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DungeonInterface;

  functions: {
    createQuest(
      newDungeonSquadCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createQuest(bytes32)"(
      newDungeonSquadCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(overrides?: CallOverrides): Promise<[number]>;

    "getNonce()"(overrides?: CallOverrides): Promise<[number]>;

    playQuest(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "playQuest(uint8,uint8,uint8)"(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveQuest(
      dungeonSquad: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resolveQuest(bytes4)"(
      dungeonSquad: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createQuest(
    newDungeonSquadCommitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createQuest(bytes32)"(
    newDungeonSquadCommitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(overrides?: CallOverrides): Promise<number>;

  "getNonce()"(overrides?: CallOverrides): Promise<number>;

  playQuest(
    squadUnit1: BigNumberish,
    squadUnit2: BigNumberish,
    squadUnit3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "playQuest(uint8,uint8,uint8)"(
    squadUnit1: BigNumberish,
    squadUnit2: BigNumberish,
    squadUnit3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveQuest(
    dungeonSquad: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resolveQuest(bytes4)"(
    dungeonSquad: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createQuest(
      newDungeonSquadCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "createQuest(bytes32)"(
      newDungeonSquadCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getNonce(overrides?: CallOverrides): Promise<number>;

    "getNonce()"(overrides?: CallOverrides): Promise<number>;

    playQuest(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "playQuest(uint8,uint8,uint8)"(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveQuest(
      dungeonSquad: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "resolveQuest(bytes4)"(
      dungeonSquad: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BattleWinners(
      undefined: null,
      undefined: null,
      undefined: null
    ): TypedEventFilter<
      [boolean, boolean, boolean],
      { arg0: boolean; arg1: boolean; arg2: boolean }
    >;

    IsPlayerWinner(
      undefined: null
    ): TypedEventFilter<[boolean], { arg0: boolean }>;

    PseudoRandomNumbers(
      undefined: null,
      undefined: null,
      undefined: null
    ): TypedEventFilter<
      [number, number, number],
      { arg0: number; arg1: number; arg2: number }
    >;
  };

  estimateGas: {
    createQuest(
      newDungeonSquadCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createQuest(bytes32)"(
      newDungeonSquadCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    playQuest(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "playQuest(uint8,uint8,uint8)"(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveQuest(
      dungeonSquad: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resolveQuest(bytes4)"(
      dungeonSquad: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createQuest(
      newDungeonSquadCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createQuest(bytes32)"(
      newDungeonSquadCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playQuest(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "playQuest(uint8,uint8,uint8)"(
      squadUnit1: BigNumberish,
      squadUnit2: BigNumberish,
      squadUnit3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveQuest(
      dungeonSquad: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resolveQuest(bytes4)"(
      dungeonSquad: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
